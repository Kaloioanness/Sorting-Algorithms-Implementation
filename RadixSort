package RadixSort;

import java.util.Arrays;
import java.util.OptionalInt;

public class RadixSort {
    public static void radixSort(int[] arr) {
        OptionalInt maxOptional = Arrays.stream(arr).max();

        if (maxOptional.isPresent()) {
            int max = maxOptional.getAsInt();
            int exp = 1;

            while (max / exp > 0) {
                countingSortByDigit(arr, exp);
                exp *= 10;
            }
        } else {
            // Handle the case where the array is empty
            System.out.println("The array is empty.");
        }
    }
    private static void countingSortByDigit(int[] arr, int exp) { //named for "exponent"
        int n = arr.length;
        int[] output = new int[n];
        int[] count = new int[10]; // Counting array for digits from 0 to 9

        Arrays.fill(count, 0);

        // Count occurrences of each digit
        for (int j : arr) {
            count[(j / exp) % 10]++;
        }

        for (int i = 1; i < 10; i++) {
            count[i] += count[i - 1];
            // Calculate cumulative count
        }

        for (int i = n - 1; i >= 0; i--) {
            output[count[(arr[i] / exp) % 10] - 1] = arr[i];
            count[(arr[i] / exp) % 10]--;
            // Build the output array
        }

        System.arraycopy(output, 0, arr, 0, n);
        // Copy the sorted elements back to the original array
    }

    public static void main(String[] args) {
        int[] arr = {170, 45, 75, 90, 802, 24, 2, 66};
        radixSort(arr);
        System.out.println("Sorted Array: " + Arrays.toString(arr));
    }
}

// Overall time complexity: O(N * K), where N is the number of elements and K is the number of digits in the maximum number
